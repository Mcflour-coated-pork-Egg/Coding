Forgot this mission ahaha
Minimum Falling Path Sum II.  Hard 1289.
Not hard, just easy dp problem.

Description:
Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.

A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.

Case 1:
Yeah, simple dp code:

                      class Solution {
                      public:
                          int minFallingPathSum(vector<vector<int>>& grid) {
                              int cost=0;
                              int n=grid.size();
                              vector<vector<int>> dp(n,vector<int> (n,0));
                              for(int i=0;i<n;i++) dp[0][i]=grid[0][i];
                              for(int i=1;i<n;i++)
                              {
                                  for(int j=0;j<n;j++)
                                  {
                                      dp[i][j]=INT_MAX;
                                      for(int k=0;k<n;k++)
                                      {
                                          if(j!=k)
                                          dp[i][j]=min(dp[i][j],dp[i-1][k]+grid[i][j]);
                                      }
                                  }
                              }
                              cost=INT_MAX;
                              for(int i=0;i<n;i++) cost=min(cost,dp[n-1][i]);
                              return cost;
                          }
                      };
Ac for a single time. But debugger shows poor efficiency.

Case 2:
Promotion of Case 1. It's easily to see that there are only two choices in the next step during dp-promotion. So we just store a minimum and the subminimum to next decision.

Especially: My originally mind is to record the two indexs of choices, better than it, an elegant solution, compare current col with previous row(G[i-1][j]) with the minimum:
            -if equal, choose the subminimum
            -else, minimum

Code:
                                          class Solution {
                                        public:
                                            int minFallingPathSum(vector<vector<int>>& grid) {
                                                int cost=0;
                                                int n=grid.size();
                                                int Min=INT_MAX,submin=INT_MAX;
                                                for(int i=1;i<n;i++)
                                                {
                                                    SeekMin(Min,submin,grid[i-1],i-1);
                                                    for(int j=0;j<n;j++)
                                                    {
                                                        if(grid[i-1][j]==Min) grid[i][j]+=submin;
                                                        else grid[i][j]+=Min;
                                                    }
                                                }
                                                cost=INT_MAX;
                                                for(int i=0;i<n;i++) cost=min(cost,grid[n-1][i]);
                                                return cost;
                                            }
                                            void SeekMin(int& Min,int& submin,vector<int>& grid,int i)
                                            {
                                                Min=INT_MAX,submin=INT_MAX;
                                                for(auto x:grid) {if(x<=Min) {submin=Min;Min=x;}else if(x<submin) submin=x;}
                                            }
                                        };


Obviously case 2 has more excellent efficiency, and the result is.
