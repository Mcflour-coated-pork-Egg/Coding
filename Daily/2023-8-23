Merge k Sorted lists    Hard 23.
Merge given k sorted lists, ascending. 

Case 1: As coding with c++, there's a shortcut for it, exploiting std library to combine all nodes into a single vector, and sort it.
Code:
                                    class Solution {
                                    public:
                                        ListNode* mergeKLists(vector<ListNode*>& lists) {
                                            if(!lists.size()) return nullptr;
                                            ListNode* pre=lists[0];
                                            int n=lists.size();
                                            vector<ListNode*> p;
                                            for(int i=0;i<n;i++)
                                            {
                                                ListNode* q=lists[i];
                                                while(q)
                                                {
                                                    p.emplace_back(q);
                                                    q=q->next;
                                                }
                                            }
                                            if(!p.size()) return nullptr;
                                            sort(p.begin(),p.end(),cmp);
                                            int l=p.size();
                                            for(int i=0;i<l;i++)
                                            {
                                                if(i<l-1)
                                                p[i]->next=p[i+1];
                                            }
                                            p[l-1]->next=nullptr;
                                            return p[0];
                                        }
                                    };
Useful for c++, java ... But for c, it's complicated to apply for memory repeatedly.

Case 2:
Here we take a pre-solution into account: Combine two lists into one. So this question degenerates to combine two lists for few times.
Code:  Easy code, but poor performance.
                                        class Solution {
                                        public:
                                            ListNode* mergeKLists(vector<ListNode*>& lists) {
                                                if(!lists.size()) return nullptr;
                                                ListNode* pre=lists[0];
                                                int n=lists.size();
                                                for(int i=1;i<n;i++)
                                                {
                                                    pre=Combine(pre,lists[i]);
                                                }
                                                return pre;
                                            }
                                            ListNode* Combine(ListNode* head1,ListNode* head2)
                                            {
                                                ListNode* head;
                                                ListNode* p=new ListNode();
                                                head=p;
                                                ListNode* p1=head1,*p2=head2;
                                                while(p1&&p2)
                                                {
                                                    if(p1->val<p2->val)
                                                    {
                                                        p->next=p1;
                                                        p1=p1->next;
                                                    }
                                                    else 
                                                    {
                                                        p->next=p2;
                                                        p2=p2->next;
                                                    }
                                                    p=p->next;
                                                }
                                                while(p1) {p->next=p1;p1=p1->next;p=p->next;}
                                                while(p2) {p->next=p2;p2=p2->next;p=p->next;}
                                                return head->next;
                                            }
                                        };
However, it has acceptable loss of memory, we could optimize it with partition.

Code:
                                        class Solution {
                                        public:
                                            ListNode* mergeKLists(vector<ListNode*>& lists) {
                                                return merge(lists,0,lists.size()-1);
                                            }
                                            ListNode* merge(vector<ListNode*>& lists,int l,int r)
                                            {
                                                if(l==r) return lists[l];
                                                if(l>r) return nullptr;
                                                int mid=(l+r)>>1;
                                                return Combine(merge(lists,l,mid),merge(lists,mid+1,r));
                                            }
                                            ListNode* Combine(ListNode* head1,ListNode* head2)
                                            {
                                                ListNode* head;
                                                ListNode* p=new ListNode();
                                                head=p;
                                                ListNode* p1=head1,*p2=head2;
                                                while(p1&&p2)
                                                {
                                                    if(p1->val<p2->val)
                                                    {
                                                        p->next=p1;
                                                        p1=p1->next;
                                                    }
                                                    else 
                                                    {
                                                        p->next=p2;
                                                        p2=p2->next;
                                                    }
                                                    p=p->next;
                                                }
                                                while(p1) {p->next=p1;p1=p1->next;p=p->next;}
                                                while(p2) {p->next=p2;p2=p2->next;p=p->next;}
                                                return head->next;
                                            }
                                        };
Beautiful performance!
Case 3: Priority queue.
Maintain the K-size priority queue, every node store the corresponding list, till empty.

Code:
                                         struct TNode{
                                             int val;
                                             ListNode* node;
                                             bool operator < (const TNode &ts) const{
                                                 return val>ts.val;
                                             }
                                         } Node;
                                        class Solution {
                                        public:
                                            ListNode* mergeKLists(vector<ListNode*>& lists) {
                                                priority_queue<TNode> q;
                                                for(auto node:lists) {if(node) {struct TNode a;a.val=node->val;a.node=node;
                                                q.push(a);}}
                                                ListNode* head=new ListNode;
                                                ListNode* p=head;
                                                while(q.size())
                                                {
                                                    struct TNode a=q.top();
                                                    q.pop();
                                                    p->next=a.node;
                                                    if(a.node->next) {a.node=a.node->next;a.val=a.node->val;q.push(a);}
                                                    p=p->next;
                                                }
                                                return head->next;
                                            }
                                        };
All.
